{"version":3,"file":"index.mjs","sources":["../lib/increment_offsets.js","../lib/set_view_offsets.js","../lib/offsets.js","../lib/callback_wrapper.js","../lib/nd_accessors.js","../lib/nd.js","../lib/main.js","../lib/0d.js","../lib/1d.js","../lib/2d.js","../lib/3d.js","../lib/4d.js","../lib/5d.js","../lib/6d.js","../lib/7d.js","../lib/8d.js","../lib/9d.js","../lib/10d.js","../lib/0d_accessors.js","../lib/1d_accessors.js","../lib/2d_accessors.js","../lib/3d_accessors.js","../lib/4d_accessors.js","../lib/5d_accessors.js","../lib/6d_accessors.js","../lib/7d_accessors.js","../lib/8d_accessors.js","../lib/9d_accessors.js","../lib/10d_accessors.js","../lib/2d_blocked.js","../lib/3d_blocked.js","../lib/4d_blocked.js","../lib/5d_blocked.js","../lib/6d_blocked.js","../lib/7d_blocked.js","../lib/8d_blocked.js","../lib/9d_blocked.js","../lib/10d_blocked.js","../lib/2d_blocked_accessors.js","../lib/3d_blocked_accessors.js","../lib/4d_blocked_accessors.js","../lib/5d_blocked_accessors.js","../lib/6d_blocked_accessors.js","../lib/7d_blocked_accessors.js","../lib/8d_blocked_accessors.js","../lib/9d_blocked_accessors.js","../lib/10d_blocked_accessors.js","../lib/initialize_array_views.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nexport default incrementOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nexport default setViewOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default offsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport put from '@stdlib/array-base-put';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Wraps a provided callback function.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {NonNegativeIntegerArray} idx - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - loop dimensions\n* @param {NonNegativeIntegerArray} lidx - current loop iteration indices\n* @param {NonNegativeIntegerArray} cdims - core dimensions\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {Function} callback wrapper\n*/\nfunction wrap( arr, idx, ldims, lidx, cdims, clbk, thisArg ) {\n\tput( idx, ldims, lidx, MODE );\n\treturn wrapper;\n\n\t/**\n\t* Invokes a callback function.\n\t*\n\t* @private\n\t* @param {*} v - value\n\t* @param {NonNegativeIntegerArray} cidx - current core iteration indices\n\t* @returns {*} result\n\t*/\n\tfunction wrapper( v, cidx ) {\n\t\tput( idx, cdims, cidx, MODE );\n\t\treturn clbk.call( thisArg, v, idx.slice(), arr );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\nimport zeros from '@stdlib/array-base-zeros';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar len;\n\tvar sub;\n\tvar set;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tsub = ind2sub( sh, strides, 0, x.order, i, MODE );\n\t\tf = wrap( x.ref, ibuf, ldims, sub, cdims, clbk, thisArg );\n\t\tset( ybuf, io[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\nimport zeros from '@stdlib/array-base-zeros';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar len;\n\tvar sub;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tsub = ind2sub( sh, strides, 0, x.order, i, MODE );\n\t\tf = wrap( x.ref, ibuf, ldims, sub, cdims, clbk, thisArg );\n\t\tybuf[ io[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed2 from '@stdlib/array-base-take-indexed2';\nimport zeros from '@stdlib/array-base-zeros';\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport initializeViews from './initialize_array_views.js';\nimport blockedaccessorunary2d from './2d_blocked_accessors.js';\nimport blockedaccessorunary3d from './3d_blocked_accessors.js';\nimport blockedaccessorunary4d from './4d_blocked_accessors.js';\nimport blockedaccessorunary5d from './5d_blocked_accessors.js';\nimport blockedaccessorunary6d from './6d_blocked_accessors.js';\nimport blockedaccessorunary7d from './7d_blocked_accessors.js';\nimport blockedaccessorunary8d from './8d_blocked_accessors.js';\nimport blockedaccessorunary9d from './9d_blocked_accessors.js';\nimport blockedaccessorunary10d from './10d_blocked_accessors.js';\nimport blockedunary2d from './2d_blocked.js';\nimport blockedunary3d from './3d_blocked.js';\nimport blockedunary4d from './4d_blocked.js';\nimport blockedunary5d from './5d_blocked.js';\nimport blockedunary6d from './6d_blocked.js';\nimport blockedunary7d from './7d_blocked.js';\nimport blockedunary8d from './8d_blocked.js';\nimport blockedunary9d from './9d_blocked.js';\nimport blockedunary10d from './10d_blocked.js';\nimport accessorunary0d from './0d_accessors.js';\nimport accessorunary1d from './1d_accessors.js';\nimport accessorunary2d from './2d_accessors.js';\nimport accessorunary3d from './3d_accessors.js';\nimport accessorunary4d from './4d_accessors.js';\nimport accessorunary5d from './5d_accessors.js';\nimport accessorunary6d from './6d_accessors.js';\nimport accessorunary7d from './7d_accessors.js';\nimport accessorunary8d from './8d_accessors.js';\nimport accessorunary9d from './9d_accessors.js';\nimport accessorunary10d from './10d_accessors.js';\nimport accessorunarynd from './nd_accessors.js';\nimport unary0d from './0d.js';\nimport unary1d from './1d.js';\nimport unary2d from './2d.js';\nimport unary3d from './3d.js';\nimport unary4d from './4d.js';\nimport unary5d from './5d.js';\nimport unary6d from './6d.js';\nimport unary7d from './7d.js';\nimport unary8d from './8d.js';\nimport unary9d from './9d.js';\nimport unary10d from './10d.js';\nimport unarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @param {Function} clbk - callback function\n* @param {thisArg} [thisArg] - callback execution context\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import everyBy from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import everyBy from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = [ false ];\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [ 0, 1, 2, 3 ], clbk );\n*\n* var v = y.data;\n* // returns [ true ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import everyBy from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 12 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, true ], [ true, true ] ], [ [ true, false ], [ true, true ] ], [ [ true, true ], [ true, true ] ] ]\n*/\nfunction unaryReduceSubarrayBy( fcn, arrays, dims, options, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar workspace;\n\tvar nargs;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar ctx;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar ord;\n\tvar FLG;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar cb;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tFLG = false;\n\n\t// Case: (fcn, arrays, dims, clbk)\n\tif ( nargs < 5 ) {\n\t\topts = {};\n\t\tcb = options;\n\t}\n\t// Case: (fcn, arrays, dims, options, clbk, thisArg)\n\telse if ( nargs > 5 ) {\n\t\tFLG = true;\n\t\topts = options;\n\t\tcb = clbk;\n\t\tctx = thisArg;\n\t}\n\t// Case: (fcn, arrays, dims, clbk, thisArg)\n\telse if ( isFunction( options ) ) {\n\t\topts = {};\n\t\tcb = options;\n\t\tctx = clbk;\n\t}\n\t// Case: (fcn, arrays, dims, options, clbk)\n\telse {\n\t\tFLG = true;\n\t\topts = options;\n\t\tcb = clbk;\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims-1 );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Initialize a workspace for storing iteration indices:\n\tworkspace = zeros( ndims );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, workspace, [], d, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, workspace, [], d, opts, FLG, cb, ctx );\n\t}\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\tsy = y.strides;\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sl );\n\tif ( iox !== 0 && ioy !== 0 && ord === strides2order( sy ) && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides) and the memory layouts are the same, we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, ord === 1, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, ord === 1, opts, FLG, cb, ctx );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ K-2 ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( y.accessorProtocol ) {\n\t\treturn accessorunarynd( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\tunarynd( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n}\n\n\n// EXPORTS //\n\nexport default unaryReduceSubarrayBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport without from '@stdlib/array-base-without';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 1 );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [];\n* var cdims = [ 0, 1 ];\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], ibuf, ldims, cdims, {}, false, clbk, {} );\n*\n* var v = y.data;\n* // returns [ true ]\n*/\nfunction unary0d( fcn, arrays, ibuf, ldims, cdims, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar arr;\n\tvar y;\n\tvar f;\n\n\ty = arrays[ 1 ];\n\tybuf = y.data;\n\n\tf = wrap( arrays[ 0 ].ref, ibuf, ldims, [], cdims, clbk, thisArg );\n\tarr = without( arrays, 1 );\n\tybuf[ y.offset ] = ( hasOpts ) ? fcn( arr, opts, f ) : fcn( arr, f );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tf = wrap( x.ref, ibuf, ldims, [ i0 ], cdims, clbk, thisArg );\n\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction unary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8]) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport without from '@stdlib/array-base-without';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 1 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [];\n* var cdims = [ 0, 1 ];\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], ibuf, ldims, cdims, {}, false, clbk, {} );\n*\n* var v = y.data.get( 0 );\n* // returns true\n*/\nfunction unary0d( fcn, arrays, ibuf, ldims, cdims, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar arr;\n\tvar y;\n\tvar f;\n\n\ty = arrays[ 1 ];\n\tybuf = y.data;\n\n\tf = wrap( arrays[ 0 ].ref, ibuf, ldims, [], cdims, clbk, thisArg );\n\tarr = without( arrays, 1 );\n\tif ( hasOpts ) {\n\t\ty.accessors[ 1 ]( ybuf, y.offset, fcn( arr, opts, f ) );\n\t} else {\n\t\ty.accessors[ 1 ]( ybuf, y.offset, fcn( arr, f ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tf = wrap( x.ref, ibuf, ldims, [ i0 ], cdims, clbk, thisArg );\n\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction unary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else {\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8]) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\nimport wrap from './callback_wrapper.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import zeros from '@stdlib/array-base-zeros';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default initializeViews;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport reduce from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for performing a reduction over a list of specified dimensions in an input ndarray according to a callback function and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var everyBy = factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* everyBy( [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'null3c', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @param {Function} clbk - callback function\n\t* @param {thisArg} [thisArg] - callback execution context\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options, clbk, thisArg ) {\n\t\tvar nargs = arguments.length;\n\t\tif ( nargs < 4 ) {\n\t\t\treturn reduce( fcn, arrays, dims, options );\n\t\t}\n\t\tif ( nargs === 4 ) {\n\t\t\treturn reduce( fcn, arrays, dims, options, clbk );\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, options, clbk, thisArg );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray according to a callback function and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-subarray-by\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import everyBy from '@stdlib/ndarray-base-every-by';\n* import unaryReduceSubarrayBy from '@stdlib/ndarray-base-unary-reduce-subarray-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every-by';\n* import unaryReduceSubarrayBy from '@stdlib/ndarray-base-unary-reduce-subarray-by';\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var everyBy = unaryReduceSubarrayBy.factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* everyBy( [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],"names":["incrementOffsets","offsets","inc","i","length","setViewOffsets","views","j","offset","arrays","out","push","MODE","wrap","arr","idx","ldims","lidx","cdims","clbk","thisArg","put","v","cidx","call","slice","UNARY","fcn","ibuf","opts","hasOpts","ybuf","y","f","data","ref","without","strides","dv0","S0","iv","i0","x","shape","isRowMajor","dv1","sh","S1","sv","i1","zeroTo","reverse","take","dv2","S2","i2","dv3","S3","i3","dv4","S4","i4","dv5","S5","i5","dv6","S6","i6","dv7","S7","i7","dv8","S8","i8","dv9","S9","i9","ACCESSOR_UNARY","accessors","set","BLOCKED_UNARY","bsize","ov1","s0","s1","ov","j0","j1","N","o","k","loopOrder","sx","sy","blockSize","dtype","zeros","ov2","s2","j2","ov3","s3","j3","ov4","s4","j4","ov5","s5","j5","ov6","s6","j6","ov7","s7","j7","ov8","s8","j8","ov9","s9","j9","BLOCKED_ACCESSOR_UNARY","MAX_DIMS","unaryReduceSubarrayBy","dims","options","workspace","nargs","ndims","ctx","tmp","len","shx","shc","shl","iox","ioy","ord","FLG","sc","sl","cb","d","s","M","K","arguments","isFunction","ndarray2object","normalizeIndices","RangeError","format","join","sort","Error","accessorProtocol","indicesComplement","takeIndexed2","numel","order","initializeViews","iterationOrder","strides2order","sub","io","vind2bind","ind2sub","accessorunarynd","unarynd","factory","TypeError","reduce","setReadOnly","main"],"mappings":"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"}