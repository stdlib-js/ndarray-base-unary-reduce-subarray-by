{
  "version": 3,
  "sources": ["../lib/initialize_array_views.js", "../lib/increment_offsets.js", "../lib/set_view_offsets.js", "../lib/offsets.js", "../lib/callback_wrapper.js", "../lib/2d_blocked_accessors.js", "../lib/3d_blocked_accessors.js", "../lib/4d_blocked_accessors.js", "../lib/5d_blocked_accessors.js", "../lib/6d_blocked_accessors.js", "../lib/7d_blocked_accessors.js", "../lib/8d_blocked_accessors.js", "../lib/9d_blocked_accessors.js", "../lib/10d_blocked_accessors.js", "../lib/2d_blocked.js", "../lib/3d_blocked.js", "../lib/4d_blocked.js", "../lib/5d_blocked.js", "../lib/6d_blocked.js", "../lib/7d_blocked.js", "../lib/8d_blocked.js", "../lib/9d_blocked.js", "../lib/10d_blocked.js", "../lib/0d_accessors.js", "../lib/1d_accessors.js", "../lib/2d_accessors.js", "../lib/3d_accessors.js", "../lib/4d_accessors.js", "../lib/5d_accessors.js", "../lib/6d_accessors.js", "../lib/7d_accessors.js", "../lib/8d_accessors.js", "../lib/9d_accessors.js", "../lib/10d_accessors.js", "../lib/nd_accessors.js", "../lib/0d.js", "../lib/1d.js", "../lib/2d.js", "../lib/3d.js", "../lib/4d.js", "../lib/5d.js", "../lib/6d.js", "../lib/7d.js", "../lib/8d.js", "../lib/9d.js", "../lib/10d.js", "../lib/nd.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = initializeViews;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrementOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setViewOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = offsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar put = require( '@stdlib/array-base-put' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Wraps a provided callback function.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {NonNegativeIntegerArray} idx - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - loop dimensions\n* @param {NonNegativeIntegerArray} lidx - current loop iteration indices\n* @param {NonNegativeIntegerArray} cdims - core dimensions\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {Function} callback wrapper\n*/\nfunction wrap( arr, idx, ldims, lidx, cdims, clbk, thisArg ) {\n\tput( idx, ldims, lidx, MODE );\n\treturn wrapper;\n\n\t/**\n\t* Invokes a callback function.\n\t*\n\t* @private\n\t* @param {*} v - value\n\t* @param {NonNegativeIntegerArray} cidx - current core iteration indices\n\t* @returns {*} result\n\t*/\n\tfunction wrapper( v, cidx ) {\n\t\tput( idx, cdims, cidx, MODE );\n\t\treturn clbk.call( thisArg, v, idx.slice(), arr );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tidx = reverse( o.idx );\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( take( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 1 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [];\n* var cdims = [ 0, 1 ];\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], ibuf, ldims, cdims, {}, false, clbk, {} );\n*\n* var v = y.data.get( 0 );\n* // returns true\n*/\nfunction unary0d( fcn, arrays, ibuf, ldims, cdims, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar arr;\n\tvar y;\n\tvar f;\n\n\ty = arrays[ 1 ];\n\tybuf = y.data;\n\n\tf = wrap( arrays[ 0 ].ref, ibuf, ldims, [], cdims, clbk, thisArg );\n\tarr = without( arrays, 1 );\n\tif ( hasOpts ) {\n\t\ty.accessors[ 1 ]( ybuf, y.offset, fcn( arr, opts, f ) );\n\t} else {\n\t\ty.accessors[ 1 ]( ybuf, y.offset, fcn( arr, f ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tf = wrap( x.ref, ibuf, ldims, [ i0 ], cdims, clbk, thisArg );\n\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction unary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else {\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8]) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar len;\n\tvar sub;\n\tvar set;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tsub = ind2sub( sh, strides, 0, x.order, i, MODE );\n\t\tf = wrap( x.ref, ibuf, ldims, sub, cdims, clbk, thisArg );\n\t\tset( ybuf, io[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 1 );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [];\n* var cdims = [ 0, 1 ];\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], ibuf, ldims, cdims, {}, false, clbk, {} );\n*\n* var v = y.data;\n* // returns [ true ]\n*/\nfunction unary0d( fcn, arrays, ibuf, ldims, cdims, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar arr;\n\tvar y;\n\tvar f;\n\n\ty = arrays[ 1 ];\n\tybuf = y.data;\n\n\tf = wrap( arrays[ 0 ].ref, ibuf, ldims, [], cdims, clbk, thisArg );\n\tarr = without( arrays, 1 );\n\tybuf[ y.offset ] = ( hasOpts ) ? fcn( arr, opts, f ) : fcn( arr, f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tf = wrap( x.ref, ibuf, ldims, [ i0 ], cdims, clbk, thisArg );\n\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unary2d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction unary2d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary3d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary4d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary5d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary6d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary7d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary8d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary9d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8]) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-params, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar reverse = require( '@stdlib/array-base-reverse' );\nvar take = require( '@stdlib/array-base-take-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary10d( base, [ x, y ], views, ibuf, ldims, cdims, slx, true, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar idx;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\tidx = zeroTo( sh.length );\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t\tidx = reverse( idx );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, ibuf, ldims, take( [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - reduction function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, ibuf, ldims, cdims, slx, null, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar len;\n\tvar sub;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar x;\n\tvar y;\n\tvar f;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tsub = ind2sub( sh, strides, 0, x.order, i, MODE );\n\t\tf = wrap( x.ref, ibuf, ldims, sub, cdims, clbk, thisArg );\n\t\tybuf[ io[1] ] = ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar ndarray2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed2 = require( '@stdlib/array-base-take-indexed2' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\nvar initializeViews = require( './initialize_array_views.js' );\nvar blockedaccessorunary2d = require( './2d_blocked_accessors.js' );\nvar blockedaccessorunary3d = require( './3d_blocked_accessors.js' );\nvar blockedaccessorunary4d = require( './4d_blocked_accessors.js' );\nvar blockedaccessorunary5d = require( './5d_blocked_accessors.js' );\nvar blockedaccessorunary6d = require( './6d_blocked_accessors.js' );\nvar blockedaccessorunary7d = require( './7d_blocked_accessors.js' );\nvar blockedaccessorunary8d = require( './8d_blocked_accessors.js' );\nvar blockedaccessorunary9d = require( './9d_blocked_accessors.js' );\nvar blockedaccessorunary10d = require( './10d_blocked_accessors.js' );\nvar blockedunary2d = require( './2d_blocked.js' );\nvar blockedunary3d = require( './3d_blocked.js' );\nvar blockedunary4d = require( './4d_blocked.js' );\nvar blockedunary5d = require( './5d_blocked.js' );\nvar blockedunary6d = require( './6d_blocked.js' );\nvar blockedunary7d = require( './7d_blocked.js' );\nvar blockedunary8d = require( './8d_blocked.js' );\nvar blockedunary9d = require( './9d_blocked.js' );\nvar blockedunary10d = require( './10d_blocked.js' );\nvar accessorunary0d = require( './0d_accessors.js' );\nvar accessorunary1d = require( './1d_accessors.js' );\nvar accessorunary2d = require( './2d_accessors.js' );\nvar accessorunary3d = require( './3d_accessors.js' );\nvar accessorunary4d = require( './4d_accessors.js' );\nvar accessorunary5d = require( './5d_accessors.js' );\nvar accessorunary6d = require( './6d_accessors.js' );\nvar accessorunary7d = require( './7d_accessors.js' );\nvar accessorunary8d = require( './8d_accessors.js' );\nvar accessorunary9d = require( './9d_accessors.js' );\nvar accessorunary10d = require( './10d_accessors.js' );\nvar accessorunarynd = require( './nd_accessors.js' );\nvar unary0d = require( './0d.js' );\nvar unary1d = require( './1d.js' );\nvar unary2d = require( './2d.js' );\nvar unary3d = require( './3d.js' );\nvar unary4d = require( './4d.js' );\nvar unary5d = require( './5d.js' );\nvar unary6d = require( './6d.js' );\nvar unary7d = require( './7d.js' );\nvar unary8d = require( './8d.js' );\nvar unary9d = require( './9d.js' );\nvar unary10d = require( './10d.js' );\nvar unarynd = require( './nd.js' );\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @param {Function} clbk - callback function\n* @param {thisArg} [thisArg] - callback execution context\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var everyBy = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var everyBy = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = [ false ];\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [ 0, 1, 2, 3 ], clbk );\n*\n* var v = y.data;\n* // returns [ true ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var everyBy = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 12 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, true ], [ true, true ] ], [ [ true, false ], [ true, true ] ], [ [ true, true ], [ true, true ] ] ]\n*/\nfunction unaryReduceSubarrayBy( fcn, arrays, dims, options, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar workspace;\n\tvar nargs;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar ctx;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar ord;\n\tvar FLG;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar cb;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tFLG = false;\n\n\t// Case: (fcn, arrays, dims, clbk)\n\tif ( nargs < 5 ) {\n\t\topts = {};\n\t\tcb = options;\n\t}\n\t// Case: (fcn, arrays, dims, options, clbk, thisArg)\n\telse if ( nargs > 5 ) {\n\t\tFLG = true;\n\t\topts = options;\n\t\tcb = clbk;\n\t\tctx = thisArg;\n\t}\n\t// Case: (fcn, arrays, dims, clbk, thisArg)\n\telse if ( isFunction( options ) ) {\n\t\topts = {};\n\t\tcb = options;\n\t\tctx = clbk;\n\t}\n\t// Case: (fcn, arrays, dims, options, clbk)\n\telse {\n\t\tFLG = true;\n\t\topts = options;\n\t\tcb = clbk;\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims-1 );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Initialize a workspace for storing iteration indices:\n\tworkspace = zeros( ndims );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, workspace, [], d, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, workspace, [], d, opts, FLG, cb, ctx );\n\t}\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\tsy = y.strides;\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sl );\n\tif ( iox !== 0 && ioy !== 0 && ord === strides2order( sy ) && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides) and the memory layouts are the same, we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, ord === 1, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, workspace, ldims, d, sl, ord === 1, opts, FLG, cb, ctx );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ K-2 ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( y.accessorProtocol ) {\n\t\treturn accessorunarynd( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\tunarynd( fcn, arr, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unaryReduceSubarrayBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar reduce = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for performing a reduction over a list of specified dimensions in an input ndarray according to a callback function and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var everyBy = factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* everyBy( [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @param {Function} clbk - callback function\n\t* @param {thisArg} [thisArg] - callback execution context\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options, clbk, thisArg ) {\n\t\tvar nargs = arguments.length;\n\t\tif ( nargs < 4 ) {\n\t\t\treturn reduce( fcn, arrays, dims, options );\n\t\t}\n\t\tif ( nargs === 4 ) {\n\t\t\treturn reduce( fcn, arrays, dims, options, clbk );\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, options, clbk, thisArg );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray according to a callback function and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-subarray-by\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var everyBy = require( '@stdlib/ndarray-base-every-by' );\n* var unaryReduceSubarrayBy = require( '@stdlib/ndarray-base-unary-reduce-subarray-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarrayBy( everyBy, [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every-by' );\n* var unaryReduceSubarrayBy = require( '@stdlib/ndarray-base-unary-reduce-subarray-by' );\n*\n* function clbk( value ) {\n*     return value > 0.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var everyBy = unaryReduceSubarrayBy.factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* everyBy( [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],
  "mappings": "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",
  "names": ["require_initialize_array_views", "__commonJSMin", "exports", "module", "initializeViews", "arrays", "out", "v", "i", "require_increment_offsets", "__commonJSMin", "exports", "module", "incrementOffsets", "offsets", "inc", "i", "require_set_view_offsets", "__commonJSMin", "exports", "module", "setViewOffsets", "views", "offsets", "i", "j", "require_offsets", "__commonJSMin", "exports", "module", "offsets", "arrays", "out", "i", "require_callback_wrapper", "__commonJSMin", "exports", "module", "put", "MODE", "wrap", "arr", "idx", "ldims", "lidx", "cdims", "clbk", "thisArg", "wrapper", "v", "cidx", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary2d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "f", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary3d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "ov1", "ov2", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "x", "y", "f", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary4d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "f", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary5d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "f", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary6d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "f", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary7d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "f", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary8d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "f", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary9d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "f", "o", "k", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary10d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary2d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary3d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "ov1", "ov2", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary4d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary5d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary6d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary7d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary8d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary9d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "f", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "take", "reverse", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary10d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "f", "o", "k", "require_d_accessors", "__commonJSMin", "exports", "module", "without", "wrap", "unary0d", "fcn", "arrays", "ibuf", "ldims", "cdims", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "arr", "y", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary1d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "sh", "S0", "iv", "i0", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary2d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary3d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary4d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "sh", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary5d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "sh", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary6d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary7d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary8d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary9d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "x", "y", "f", "i", "require_d_accessors", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary10d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "x", "y", "f", "i", "require_nd_accessors", "__commonJSMin", "exports", "module", "numel", "vind2bind", "ind2sub", "zeros", "setViewOffsets", "offsets", "wrap", "MODE", "unarynd", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "len", "sub", "set", "sh", "iv", "io", "N", "v", "x", "y", "f", "i", "j", "require_d", "__commonJSMin", "exports", "module", "without", "wrap", "unary0d", "fcn", "arrays", "ibuf", "ldims", "cdims", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "arr", "y", "f", "require_d", "__commonJSMin", "exports", "module", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary1d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "sh", "S0", "iv", "i0", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary2d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary3d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary4d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "sh", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary5d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "sh", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary6d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary7d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary8d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary9d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "x", "y", "f", "i", "require_d", "__commonJSMin", "exports", "module", "zeroTo", "reverse", "take", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary10d", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "idx", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "x", "y", "f", "i", "require_nd", "__commonJSMin", "exports", "module", "numel", "vind2bind", "ind2sub", "zeros", "setViewOffsets", "offsets", "wrap", "MODE", "unarynd", "fcn", "arrays", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "len", "sub", "sh", "iv", "io", "N", "v", "x", "y", "f", "i", "j", "require_main", "__commonJSMin", "exports", "module", "isFunction", "ndarray2object", "normalizeIndices", "indicesComplement", "takeIndexed2", "zeros", "iterationOrder", "strides2order", "numel", "join", "format", "initializeViews", "blockedaccessorunary2d", "blockedaccessorunary3d", "blockedaccessorunary4d", "blockedaccessorunary5d", "blockedaccessorunary6d", "blockedaccessorunary7d", "blockedaccessorunary8d", "blockedaccessorunary9d", "blockedaccessorunary10d", "blockedunary2d", "blockedunary3d", "blockedunary4d", "blockedunary5d", "blockedunary6d", "blockedunary7d", "blockedunary8d", "blockedunary9d", "blockedunary10d", "accessorunary0d", "accessorunary1d", "accessorunary2d", "accessorunary3d", "accessorunary4d", "accessorunary5d", "accessorunary6d", "accessorunary7d", "accessorunary8d", "accessorunary9d", "accessorunary10d", "accessorunarynd", "unary0d", "unary1d", "unary2d", "unary3d", "unary4d", "unary5d", "unary6d", "unary7d", "unary8d", "unary9d", "unary10d", "unarynd", "UNARY", "ACCESSOR_UNARY", "BLOCKED_UNARY", "BLOCKED_ACCESSOR_UNARY", "MAX_DIMS", "unaryReduceSubarrayBy", "fcn", "arrays", "dims", "options", "clbk", "thisArg", "workspace", "nargs", "views", "ndims", "ldims", "opts", "ctx", "arr", "tmp", "len", "shx", "shc", "shl", "iox", "ioy", "ord", "FLG", "sc", "sl", "sy", "cb", "d", "s", "N", "M", "K", "x", "y", "j", "require_factory", "__commonJSMin", "exports", "module", "isFunction", "format", "reduce", "factory", "fcn", "reducer", "arrays", "dims", "options", "clbk", "thisArg", "nargs", "setReadOnly", "main", "factory"]
}
